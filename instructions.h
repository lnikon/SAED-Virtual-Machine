#ifndef INSTRUCTIONS_H
#define INSTRUCTIONS_H

#include <QHash>

using int8 = char;
using uint8 = unsigned char;
using int16 = short;
using uint16 = unsigned short;
using int32 = int;
using uint32 = unsigned int;
using int64 = long long;
using uint64 = unsigned long long;

union Opcode
{
	Opcode & operator=(const uint16 & val)
	{
		opcode = val;
		return *this;
	}
	uint16 opcode;
	struct
	{
		uint16 instr : 8;
		union
		{
			uint16 argType : 6;
			struct
			{
				uint16 arg1Type : 2;
				uint16 arg2Type : 2;
				uint16 arg3Type : 2;
			};
		};
		uint16 argSize : 2;
	};
};

enum class ArgumentType { R = 1, A, C };

enum class Type { BYTE = 1, WORD = 2, DWORD = 4, QWORD = 8 };

const QHash<QString, Type> type =
{
	{ "byte", Type::BYTE }, { "word", Type::WORD },
	{ "dword", Type::DWORD }, { "qword", Type::QWORD }
};

const QHash<QString, Type> InstrType =
{
	{ "b", Type::BYTE }, { "w", Type::WORD },
	{ "d", Type::DWORD }, { "q", Type::QWORD }
};

enum class Instruction
{
	NOP = 1,
	BREAK,
	INT,
	JUMP,
	CALL,
	RET,
	IRET,
	STI,
	CLI,
	STC,
	CLC,
	ASSIGNB,
	ASSIGNW,
	ASSIGN,
	ASSIGNQ,
	MOVEB,
	MOVEW,
	MOVE,
	MOVEQ,
	SWAPB,
	SWAPW,
	SWAP,
	SWAPQ,
	ADDB,
	ADDW,
	ADD,
	ADDQ,
	ADCB,
	ADCW,
	ADC,
	ADCQ,
	SUBB,
	SUBW,
	SUB,
	SUBQ,
	SBBB,
	SBBW,
	SBB,
	SBBQ,
	MULB,
	MULW,
	MUL,
	MULQ,
	IMULB,
	IMULW,
	IMUL,
	IMULQ,
	DIVB,
	DIVW,
	DIV,
	DIVQ,
	IDIVB,
	IDIVW,
	IDIV,
	IDIVQ,
	INCB,
	INCW,
	INC,
	INCQ,
	DECB,
	DECW,
	DEC,
	DECQ,
	NEGB,
	NEGW,
	NEG,
	NEGQ,
	CMPB,
	CMPW,
	CMP,
	CMPQ,
	ANDB,
	ANDW,
	AND,
	ANDQ,
	ORB,
	ORW,
	OR,
	ORQ,
	XORB,
	XORW,
	XOR,
	XORQ,
	NANDB,
	NANDW,
	NAND,
	NANDQ,
	NORB,
	NORW,
	NOR,
	NORQ,
	NOTB,
	NOTW,
	NOT,
	NOTQ,
	SHRB,
	SHRW,
	SHR,
	SHRQ,
	SARB,
	SARW,
	SAR,
	SARQ,
	SHLB,
	SHLW,
	SHL,
	SHLQ,
	SALB,
	SALW,
	SAL,
	SALQ,
	RORB,
	RORW,
	ROR,
	RORQ,
	RCRB,
	RCRW,
	RCR,
	RCRQ,
	ROLB,
	ROLW,
	ROL,
	ROLQ,
	RCLB,
	RCLW,
	RCL,
	RCLQ,
	TESTB,
	TESTW,
	TEST,
	TESTQ,
	LOADB,
	LOADW,
	LOAD,
	LOADQ,
	STOREB,
	STOREW,
	STORE,
	STOREQ,
	PUSHB,
	PUSHW,
	PUSH,
	PUSHQ,
	POPB,
	POPW,
	POP,
	POPQ,
	PUSHF,
	POPF,
	PUSHSF,
	POPSF,
	INB,
	INW,
	IN,
	INQ,
	OUTB,
	OUTW,
	OUT,
	OUTQ,
};

struct Pair
{
	Pair(Instruction i, int32 a, Type t) :
		instr_code(i), argument_count(a), argument_type(t) {}

	Instruction instr_code;
	int32 argument_count;
	Type argument_type;
};

const QHash<QString, Pair> inst =
{
	{ "nop", Pair(Instruction::NOP, 0, Type::DWORD) },
	{ "break", Pair(Instruction::BREAK, 1, Type::DWORD) },
	{ "int", Pair(Instruction::INT, 1, Type::DWORD) },
	{ "jump", Pair(Instruction::JUMP, 1, Type::DWORD) },
	{ "call", Pair(Instruction::CALL, 1, Type::DWORD) },
	{ "ret", Pair(Instruction::RET, 0, Type::DWORD) },
	{ "iret", Pair(Instruction::IRET, 0, Type::DWORD) },
	{ "sti", Pair(Instruction::STI, 1, Type::DWORD) },
	{ "cli", Pair(Instruction::CLI, 1, Type::DWORD) },
	{ "stc", Pair(Instruction::STC, 1, Type::DWORD) },
	{ "clc", Pair(Instruction::CLC, 1, Type::DWORD) },
	{ "assignb", Pair(Instruction::ASSIGNB, 2, Type::BYTE) },
	{ "assignw", Pair(Instruction::ASSIGNW, 2, Type::WORD) },
	{ "assign", Pair(Instruction::ASSIGN, 2, Type::DWORD) },
	{ "assignq", Pair(Instruction::ASSIGNQ, 2, Type::QWORD) },
	{ "moveb", Pair(Instruction::MOVEB, 2, Type::BYTE) },
	{ "movew", Pair(Instruction::MOVEW, 2, Type::WORD) },
	{ "move", Pair(Instruction::MOVE, 2, Type::DWORD) },
	{ "moveq", Pair(Instruction::MOVEQ, 2, Type::QWORD) },
	{ "swapb", Pair(Instruction::SWAPB, 2, Type::BYTE) },
	{ "swapw", Pair(Instruction::SWAPW, 2, Type::WORD) },
	{ "swap", Pair(Instruction::SWAP, 2, Type::DWORD) },
	{ "swapq", Pair(Instruction::SWAPQ, 2, Type::QWORD) },
	{ "addb", Pair(Instruction::ADDB, 3, Type::BYTE) },
	{ "addw", Pair(Instruction::ADDW, 3, Type::WORD) },
	{ "add", Pair(Instruction::ADD, 3, Type::DWORD) },
	{ "addq", Pair(Instruction::ADDQ, 3, Type::QWORD) },
	{ "adcb", Pair(Instruction::ADCB, 3, Type::BYTE) },
	{ "adcw", Pair(Instruction::ADCW, 3, Type::WORD) },
	{ "adc", Pair(Instruction::ADC, 3, Type::DWORD) },
	{ "adcq", Pair(Instruction::ADCQ, 3, Type::QWORD) },
	{ "subb", Pair(Instruction::SUBB, 3, Type::BYTE) },
	{ "subw", Pair(Instruction::SUBW, 3, Type::WORD) },
	{ "sub", Pair(Instruction::SUB, 3, Type::DWORD) },
	{ "subq", Pair(Instruction::SUBQ, 3, Type::QWORD) },
	{ "sbbb", Pair(Instruction::SBBB, 3, Type::BYTE) },
	{ "sbbw", Pair(Instruction::SBBW, 3, Type::WORD) },
	{ "sbb", Pair(Instruction::SBB, 3, Type::DWORD) },
	{ "sbbq", Pair(Instruction::SBBQ, 3, Type::QWORD) },
	{ "mulb", Pair(Instruction::MULB, 3, Type::BYTE) },
	{ "mulw", Pair(Instruction::MULW, 3, Type::WORD) },
	{ "mul", Pair(Instruction::MUL, 3, Type::DWORD) },
	{ "mulq", Pair(Instruction::MULQ, 3, Type::QWORD) },
	{ "imulb", Pair(Instruction::IMULB, 3, Type::BYTE) },
	{ "imulw", Pair(Instruction::IMULW, 3, Type::WORD) },
	{ "imul", Pair(Instruction::IMUL, 3, Type::DWORD) },
	{ "imulq", Pair(Instruction::IMULQ, 3, Type::QWORD) },
	{ "divb", Pair(Instruction::DIVB, 3, Type::BYTE) },
	{ "divw", Pair(Instruction::DIVW, 3, Type::WORD) },
	{ "div", Pair(Instruction::DIV, 3, Type::DWORD) },
	{ "divq", Pair(Instruction::DIVQ, 3, Type::QWORD) },
	{ "idivb", Pair(Instruction::IDIVB, 3, Type::BYTE) },
	{ "idivw", Pair(Instruction::IDIVW, 3, Type::WORD) },
	{ "idiv", Pair(Instruction::IDIV, 3, Type::DWORD) },
	{ "idivq", Pair(Instruction::IDIVQ, 3, Type::QWORD) },
	{ "incb", Pair(Instruction::INCB, 1, Type::BYTE) },
	{ "incw", Pair(Instruction::INCW, 1, Type::WORD) },
	{ "inc", Pair(Instruction::INC, 1, Type::DWORD) },
	{ "incq", Pair(Instruction::INCQ, 1, Type::QWORD) },
	{ "decb", Pair(Instruction::DECB, 1, Type::BYTE) },
	{ "decw", Pair(Instruction::DECW, 1, Type::WORD) },
	{ "dec", Pair(Instruction::DEC, 1, Type::DWORD) },
	{ "decq", Pair(Instruction::DECQ, 1, Type::QWORD) },
	{ "negb", Pair(Instruction::NEGB, 1, Type::BYTE) },
	{ "negw", Pair(Instruction::NEGW, 1, Type::WORD) },
	{ "neg", Pair(Instruction::NEG, 1, Type::DWORD) },
	{ "negq", Pair(Instruction::NEGQ, 1, Type::QWORD) },
	{ "cmpb", Pair(Instruction::CMPB, 2, Type::BYTE) },
	{ "cmpw", Pair(Instruction::CMPW, 2, Type::WORD) },
	{ "cmp", Pair(Instruction::CMP, 2, Type::DWORD) },
	{ "cmpq", Pair(Instruction::CMPQ, 2, Type::QWORD) },
	{ "andb", Pair(Instruction::ANDB, 3, Type::BYTE) },
	{ "andw", Pair(Instruction::ANDW, 3, Type::WORD) },
	{ "and", Pair(Instruction::AND, 3, Type::DWORD) },
	{ "andq", Pair(Instruction::ANDQ, 3, Type::QWORD) },
	{ "orb", Pair(Instruction::ORB, 3, Type::BYTE) },
	{ "orw", Pair(Instruction::ORW, 3, Type::WORD) },
	{ "or", Pair(Instruction::OR, 3, Type::DWORD) },
	{ "orq", Pair(Instruction::ORQ, 3, Type::QWORD) },
	{ "xorb", Pair(Instruction::XORB, 3, Type::BYTE) },
	{ "xorw", Pair(Instruction::XORW, 3, Type::WORD) },
	{ "xor", Pair(Instruction::XOR, 3, Type::DWORD) },
	{ "xorq", Pair(Instruction::XORQ, 3, Type::QWORD) },
	{ "nandb", Pair(Instruction::NANDB, 3, Type::BYTE) },
	{ "nandw", Pair(Instruction::NANDW, 3, Type::WORD) },
	{ "nand", Pair(Instruction::NAND, 3, Type::DWORD) },
	{ "nandq", Pair(Instruction::NANDQ, 3, Type::QWORD) },
	{ "norb", Pair(Instruction::NORB, 3, Type::BYTE) },
	{ "norw", Pair(Instruction::NORW, 3, Type::WORD) },
	{ "nor", Pair(Instruction::NOR, 3, Type::DWORD) },
	{ "norq", Pair(Instruction::NORQ, 3, Type::QWORD) },
	{ "notb", Pair(Instruction::NOTB, 1, Type::BYTE) },
	{ "notw", Pair(Instruction::NOTW, 1, Type::WORD) },
	{ "not", Pair(Instruction::NOT, 1, Type::DWORD) },
	{ "notq", Pair(Instruction::NOTQ, 1, Type::QWORD) },
	{ "shrb", Pair(Instruction::SHRB, 2, Type::BYTE) },
	{ "shrw", Pair(Instruction::SHRW, 2, Type::WORD) },
	{ "shr", Pair(Instruction::SHR, 2, Type::DWORD) },
	{ "shrq", Pair(Instruction::SHRQ, 2, Type::QWORD) },
	{ "sarb", Pair(Instruction::SARB, 2, Type::BYTE) },
	{ "sarw", Pair(Instruction::SARW, 2, Type::WORD) },
	{ "sar", Pair(Instruction::SAR, 2, Type::DWORD) },
	{ "sarq", Pair(Instruction::SARQ, 2, Type::QWORD) },
	{ "shlb", Pair(Instruction::SHLB, 2, Type::BYTE) },
	{ "shlw", Pair(Instruction::SHLW, 2, Type::WORD) },
	{ "shl", Pair(Instruction::SHL, 2, Type::DWORD) },
	{ "shlq", Pair(Instruction::SHLQ, 2, Type::QWORD) },
	{ "salb", Pair(Instruction::SALB, 2, Type::BYTE) },
	{ "salw", Pair(Instruction::SALW, 2, Type::WORD) },
	{ "sal", Pair(Instruction::SAL, 2, Type::DWORD) },
	{ "salq", Pair(Instruction::SALQ, 2, Type::QWORD) },
	{ "rorb", Pair(Instruction::RORB, 2, Type::BYTE) },
	{ "rorw", Pair(Instruction::RORW, 2, Type::WORD) },
	{ "ror", Pair(Instruction::ROR, 2, Type::DWORD) },
	{ "rorq", Pair(Instruction::RORQ, 2, Type::QWORD) },
	{ "rcrb", Pair(Instruction::RCRB, 2, Type::BYTE) },
	{ "rcrw", Pair(Instruction::RCRW, 2, Type::WORD) },
	{ "rcr", Pair(Instruction::RCR, 2, Type::DWORD) },
	{ "rcrq", Pair(Instruction::RCRQ, 2, Type::QWORD) },
	{ "rolb", Pair(Instruction::ROLB, 2, Type::BYTE) },
	{ "rolw", Pair(Instruction::ROLW, 2, Type::WORD) },
	{ "rol", Pair(Instruction::ROL, 2, Type::DWORD) },
	{ "rolq", Pair(Instruction::ROLQ, 2, Type::QWORD) },
	{ "rclb", Pair(Instruction::RCLB, 2, Type::BYTE) },
	{ "rclw", Pair(Instruction::RCLW, 2, Type::WORD) },
	{ "rcl", Pair(Instruction::RCL, 2, Type::DWORD) },
	{ "rclq", Pair(Instruction::RCLQ, 2, Type::QWORD) },
	{ "testb", Pair(Instruction::TESTB, 2, Type::BYTE) },
	{ "testw", Pair(Instruction::TESTW, 2, Type::WORD) },
	{ "test", Pair(Instruction::TEST, 2, Type::DWORD) },
	{ "testq", Pair(Instruction::TESTQ, 2, Type::QWORD) },
	{ "loadb", Pair(Instruction::LOADB, 2, Type::BYTE) },
	{ "loadw", Pair(Instruction::LOADW, 2, Type::WORD) },
	{ "load", Pair(Instruction::LOAD, 2, Type::DWORD) },
	{ "loadq", Pair(Instruction::LOADQ, 2, Type::QWORD) },
	{ "storeb", Pair(Instruction::STOREB, 2, Type::BYTE) },
	{ "storew", Pair(Instruction::STOREW, 2, Type::WORD) },
	{ "store", Pair(Instruction::STORE, 2, Type::DWORD) },
	{ "storeq", Pair(Instruction::STOREQ, 2, Type::QWORD) },
	{ "pushb", Pair(Instruction::PUSHB, 1, Type::BYTE) },
	{ "pushw", Pair(Instruction::PUSHW, 1, Type::WORD) },
	{ "push", Pair(Instruction::PUSH, 1, Type::DWORD) },
	{ "pushq", Pair(Instruction::PUSHQ, 1, Type::QWORD) },
	{ "popb", Pair(Instruction::POPB, 1, Type::BYTE) },
	{ "popw", Pair(Instruction::POPW, 1, Type::WORD) },
	{ "pop", Pair(Instruction::POP, 1, Type::DWORD) },
	{ "popq", Pair(Instruction::POPQ, 1, Type::QWORD) },
	{ "pushf", Pair(Instruction::PUSHF, 0, Type::DWORD) },
	{ "popf", Pair(Instruction::POPF, 0, Type::DWORD) },
	{ "pushsf", Pair(Instruction::PUSHSF, 0, Type::DWORD) },
	{ "popsf", Pair(Instruction::POPSF, 0, Type::DWORD) },
	{ "inb", Pair(Instruction::INB, 2, Type::BYTE) },
	{ "inw", Pair(Instruction::INW, 2, Type::WORD) },
	{ "in", Pair(Instruction::IN, 2, Type::DWORD) },
	{ "inq", Pair(Instruction::INQ, 2, Type::QWORD) },
	{ "outb", Pair(Instruction::OUTB, 2, Type::BYTE) },
	{ "outw", Pair(Instruction::OUTW, 2, Type::WORD) },
	{ "out", Pair(Instruction::OUT, 2, Type::DWORD) },
	{ "outq", Pair(Instruction::OUTQ, 2, Type::QWORD) },
};

#endif // !INSTRUCTIONS_H
